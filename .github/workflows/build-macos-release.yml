name: Build macOS App for Release

on:
  release:
    types: [published, edited]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      test_build:
        description: 'Test build without release upload'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.13'
  APP_NAME: 'Knowledge_Chipper'

jobs:
  # Test the build process across multiple macOS versions
  test-build:
    name: Test Build on macOS ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, macos-13, macos-14]  # macOS Monterey, Ventura, Sonoma
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper version detection

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        # Install dependencies that might be needed
        brew install --quiet ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .  # Install package in editable mode
        pip install pytest  # For any basic tests

    - name: Verify icon files exist
      run: |
        if [ ! -f "chipper.png" ]; then
          echo "‚ùå chipper.png not found"
          exit 1
        fi
        if [ ! -f "chipper.ico" ]; then
          echo "‚ùå chipper.ico not found"
          exit 1
        fi
        echo "‚úÖ Icon files found"
        file chipper.png
        file chipper.ico

    - name: Test basic import
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            # Test core imports without GUI components
            from knowledge_system.cli import main
            from knowledge_system.config import get_config
            print('‚úÖ Core imports successful')

            # Test icon path finding (without PyQt6)
            from pathlib import Path
            from knowledge_system.gui.assets.icons import get_icon_path
            icon_path = get_icon_path()
            if icon_path and icon_path.exists():
                print(f'‚úÖ Icon file found at: {icon_path}')
            else:
                print('‚ùå Icon file not found by icon system')
                exit(1)
        except Exception as e:
            print(f'‚ùå Import test failed: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        "

    - name: Prepare build script
      run: |
        # Make build script executable
        chmod +x build_macos_app.sh

        # Show build script info
        echo "üìã Build script info:"
        head -20 build_macos_app.sh

    - name: Test build (dry run)
      if: matrix.os != 'macos-14' || github.event.inputs.test_build == 'true'
      run: |
        echo "üß™ Testing build process on ${{ matrix.os }}"
        # Create a test version that doesn't require sudo
        mkdir -p test_build

        # Test icon creation
        mkdir -p test_build/icon.iconset
        for size in 16 32 128 256 512; do
          sips -z $size $size chipper.png --out test_build/icon.iconset/icon_${size}x${size}.png
          sips -z $((size*2)) $((size*2)) chipper.png --out test_build/icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns test_build/icon.iconset -o test_build/AppIcon.icns

        echo "‚úÖ Icon creation test passed on ${{ matrix.os }}"
        ls -la test_build/AppIcon.icns
        file test_build/AppIcon.icns

  # Main build job - only runs on latest macOS for actual release
  build-release:
    name: Build Release App
    runs-on: macos-14  # Use latest macOS for release builds
    needs: test-build
    if: always() && (github.event_name == 'release' || github.event.inputs.test_build == 'false')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        brew install --quiet ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .  # Install package in editable mode

    - name: Get version info
      id: version
      run: |
        if [ -f "src/knowledge_system/version.py" ]; then
          VERSION=$(grep '^VERSION\s*=\s*"' src/knowledge_system/version.py | sed -E 's/.*"([^"]+)".*/\1/')
        else
          VERSION=$(git describe --tags --always)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Building version: $VERSION"

    - name: Build macOS app
      run: |
        echo "üèóÔ∏è Building Knowledge Chipper.app..."

        # Create build directory
        mkdir -p build_output
        APP_NAME="Knowledge_Chipper"
        APP_PATH="build_output/$APP_NAME.app"
        CONTENTS_PATH="$APP_PATH/Contents"
        MACOS_PATH="$CONTENTS_PATH/MacOS"
        RESOURCES_PATH="$CONTENTS_PATH/Resources"

        # Create app bundle structure
        mkdir -p "$MACOS_PATH" "$RESOURCES_PATH"

        # Copy project files
        cp -r src "$MACOS_PATH/"
        cp -r config "$MACOS_PATH/"
        cp requirements.txt "$MACOS_PATH/"

        # Create virtual environment inside app bundle
        python -m venv "$MACOS_PATH/venv"
        "$MACOS_PATH/venv/bin/python" -m pip install --upgrade pip
        "$MACOS_PATH/venv/bin/python" -m pip install -r requirements.txt
        
        # Install the package in editable mode (need to copy setup files first)
        cp pyproject.toml "$MACOS_PATH/" || true
        cd "$MACOS_PATH" && "$MACOS_PATH/venv/bin/python" -m pip install -e . && cd -

        # Create Info.plist
        cat > "$CONTENTS_PATH/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>launch</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
            <key>CFBundleIdentifier</key>
            <string>com.knowledgechipper.app</string>
            <key>CFBundleName</key>
            <string>Knowledge Chipper</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.version.outputs.version }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.12</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>LSRequiresNativeExecution</key>
            <true/>
        </dict>
        </plist>
        EOF

        # Create launch script
        cat > "$MACOS_PATH/launch" << 'EOF'
        #!/bin/bash
        APP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
        
        # Activate virtual environment
        source "$APP_DIR/venv/bin/activate"
        
        # Set PYTHONPATH
        export PYTHONPATH="$APP_DIR/src:$PYTHONPATH"
        
        # Launch GUI
        cd "$APP_DIR"
        exec python -m knowledge_system.gui.__main__
        EOF
        chmod +x "$MACOS_PATH/launch"

        # Create app icon
        mkdir -p icon.iconset
        for size in 16 32 128 256 512; do
            sips -z $size $size chipper.png --out icon.iconset/icon_${size}x${size}.png
            sips -z $((size*2)) $((size*2)) chipper.png --out icon.iconset/icon_${size}x${size}@2x.png
        done
        iconutil -c icns icon.iconset -o "$RESOURCES_PATH/AppIcon.icns"
        rm -rf icon.iconset

        echo "‚úÖ App bundle created successfully"

    - name: Verify build output
      run: |
        if [ -d "build_output/${{ env.APP_NAME }}.app" ]; then
          echo "‚úÖ App bundle created successfully"
          ls -la "build_output/${{ env.APP_NAME }}.app/Contents/"

          # Check icon
          if [ -f "build_output/${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.icns" ]; then
            echo "‚úÖ App icon included"
            file "build_output/${{ env.APP_NAME }}.app/Contents/Resources/AppIcon.icns"
          else
            echo "‚ùå App icon missing"
            exit 1
          fi

          # Check executable
          if [ -f "build_output/${{ env.APP_NAME }}.app/Contents/MacOS/launch" ]; then
            echo "‚úÖ Launch script included"
          else
            echo "‚ùå Launch script missing"
            exit 1
          fi
        else
          echo "‚ùå App bundle not created"
          exit 1
        fi

    - name: Create DMG archive
      run: |
        cd build_output

        # Create professional DMG disk image
        hdiutil create \
          -volname "${{ env.APP_NAME }}" \
          -srcfolder "${{ env.APP_NAME }}.app" \
          -ov \
          -format UDZO \
          -imagekey zlib-level=9 \
          "${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-macOS.dmg"

        echo "üì¶ Created release archive:"
        ls -la *.dmg

        # Verify DMG was created successfully
        if [ ! -f "${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-macOS.dmg" ]; then
          echo "‚ùå DMG creation failed"
          exit 1
        fi

        echo "‚úÖ DMG created successfully"
        hdiutil imageinfo "${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-macOS.dmg"

    - name: Upload DMG to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./build_output/${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-macOS.dmg
        asset_name: ${{ env.APP_NAME }}-v${{ steps.version.outputs.version }}-macOS.dmg
        asset_content_type: application/x-apple-diskimage

    - name: Upload build artifacts (for manual downloads)
      uses: actions/upload-artifact@v3
      with:
        name: macos-app-v${{ steps.version.outputs.version }}
        path: build_output/${{ env.APP_NAME }}*.dmg
        retention-days: 30

  # Create a compatibility report
  compatibility-report:
    name: Generate Compatibility Report
    runs-on: ubuntu-latest
    needs: [test-build, build-release]
    if: always()

    steps:
    - name: Create compatibility summary
      run: |
        echo "# macOS Compatibility Report" > compatibility_report.md
        echo "" >> compatibility_report.md
        echo "## Build Status" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "| macOS Version | Status |" >> compatibility_report.md
        echo "|---------------|--------|" >> compatibility_report.md
        echo "| macOS 12 (Monterey) | ${{ needs.test-build.result }} |" >> compatibility_report.md
        echo "| macOS 13 (Ventura) | ${{ needs.test-build.result }} |" >> compatibility_report.md
        echo "| macOS 14 (Sonoma) | ${{ needs.test-build.result }} |" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "## Release Build" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "Status: ${{ needs.build-release.result }}" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "Built on: $(date)" >> compatibility_report.md

    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-report
        path: compatibility_report.md
        retention-days: 30
