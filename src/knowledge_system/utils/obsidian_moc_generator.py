"""
Generate Obsidian MOC pages with dataview queries.

This module provides functions to generate MOC (Maps of Content) pages that use
Obsidian's dataview plugin to automatically aggregate content based on YAML frontmatter.
These pages create dynamic, self-updating collections of people, mental models, jargon,
and content across your knowledge base.
"""

from datetime import datetime


def generate_people_page() -> str:
    """Generate People.md with dataview query for aggregating people mentions."""
    return f'''# People Directory

*This page automatically aggregates people mentioned across all your content.*

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## All People Mentioned

```dataview
TABLE 
  People_01 as "Primary Person",
  People_02 as "Additional People",
  file.ctime as "Created"
FROM ""
WHERE People_01 != null
SORT People_01 ASC
```

## Recent Content with People

```dataview
TABLE People_01, People_02, claims_extracted
FROM ""
WHERE People_01 != null
SORT file.mtime DESC
LIMIT 10
```

## People by Frequency

```dataview
TABLE 
  People_01 as "Person",
  length(People_02) as "Additional Mentions",
  count(rows) as "Files Mentioned"
FROM ""
WHERE People_01 != null
GROUP BY People_01
SORT count(rows) DESC
```

---
*This page is auto-generated by Knowledge Chipper. Copy to your Obsidian vault and customize queries as needed.*
'''


def generate_mental_models_page() -> str:
    """Generate Mental_Models.md with dataview query for aggregating mental models."""
    return f'''# Mental Models Collection

*Automatically aggregates mental models and frameworks across your knowledge base.*

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## All Mental Models

```dataview
TABLE 
  Mental_Models_01 as "Model/Framework",
  Mental_Models_02 as "Additional Models",
  file.link as "Source"
FROM ""
WHERE Mental_Models_01 != null
SORT Mental_Models_01 ASC
```

## Recent Mental Models

```dataview
LIST Mental_Models_01
FROM ""
WHERE Mental_Models_01 != null
SORT file.mtime DESC
LIMIT 15
```

## Mental Models by Usage

```dataview
TABLE 
  Mental_Models_01 as "Mental Model",
  count(rows) as "Times Mentioned"
FROM ""
WHERE Mental_Models_01 != null
GROUP BY Mental_Models_01
SORT count(rows) DESC
```

## Content Rich in Mental Models

```dataview
TABLE title, Mental_Models_01, Mental_Models_02, Mental_Models_03
FROM ""
WHERE Mental_Models_01 != null AND Mental_Models_02 != null
SORT file.mtime DESC
```

---
*This page is auto-generated by Knowledge Chipper. Copy to your Obsidian vault and customize queries as needed.*
'''


def generate_jargon_page() -> str:
    """Generate Jargon.md with dataview query for aggregating terminology."""
    return f'''# Jargon & Terminology

*Automatically aggregates jargon and terminology across your knowledge base.*

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## All Terms

```dataview
TABLE 
  Jargon_01 as "Primary Term",
  Jargon_02 as "Additional Terms",
  file.link as "Source"
FROM ""
WHERE Jargon_01 != null
SORT Jargon_01 ASC
```

## Recent Terminology

```dataview
LIST Jargon_01
FROM ""
WHERE Jargon_01 != null
SORT file.mtime DESC
LIMIT 15
```

## Most Frequently Used Terms

```dataview
TABLE 
  Jargon_01 as "Term",
  count(rows) as "Usage Count"
FROM ""
WHERE Jargon_01 != null
GROUP BY Jargon_01
SORT count(rows) DESC
LIMIT 20
```

## Content Rich in Jargon

```dataview
TABLE title, Jargon_01, Jargon_02, Jargon_03
FROM ""
WHERE Jargon_01 != null AND Jargon_02 != null
SORT file.mtime DESC
```

---
*This page is auto-generated by Knowledge Chipper. Copy to your Obsidian vault and customize queries as needed.*
'''


def generate_main_moc_page() -> str:
    """Generate main MOC.md with comprehensive dataview queries."""
    return f'''# Knowledge Map - Main MOC

*Central hub for your knowledge base with dynamic content aggregation.*

*Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}*

## Recent Content

```dataview
TABLE title, claims_extracted, people_found, concepts_found
FROM ""
WHERE Is_MOC = "false"
SORT file.mtime DESC
LIMIT 10
```

## Content Statistics

```dataview
TABLE 
  count(rows) as "Total Files",
  sum(claims_extracted) as "Total Claims",
  sum(people_found) as "Total People",
  sum(concepts_found) as "Total Concepts"
FROM ""
WHERE Is_MOC = "false"
```

## Content by Source Type

```dataview
TABLE 
  file.folder as "Folder",
  count(rows) as "Files",
  sum(claims_extracted) as "Claims"
FROM ""
WHERE Is_MOC = "false"
GROUP BY file.folder
SORT count(rows) DESC
```

## Most Content-Rich Files

```dataview
TABLE title, claims_extracted, people_found, concepts_found
FROM ""
WHERE claims_extracted > 5
SORT claims_extracted DESC
LIMIT 15
```

## Quick Access

- [[People]] - People mentioned across content
- [[Mental_Models]] - Frameworks and models  
- [[Jargon]] - Terminology and definitions

## Files with All Entity Types

```dataview
TABLE title, People_01, Mental_Models_01, Jargon_01
FROM ""
WHERE People_01 != null AND Mental_Models_01 != null AND Jargon_01 != null
SORT file.mtime DESC
```

---
*This page is auto-generated by Knowledge Chipper. Copy to your Obsidian vault and customize queries as needed.*

## How to Use These Pages

1. **Copy to Vault**: Copy these .md files to your Obsidian vault
2. **Install Dataview**: Ensure you have the Dataview plugin installed in Obsidian
3. **Customize**: Edit the dataview queries to match your specific needs
4. **Link**: Use [[People]], [[Mental_Models]], etc. to link between pages

## Example Custom Queries

### Find content by specific person:
```
LIST FROM "" WHERE contains(People_01, "Elon Musk")
```

### Mental models in recent files:
```
TABLE Mental_Models_01 FROM "" WHERE file.mtime > date(today) - dur(7 days) AND Mental_Models_01 != null
```
'''


def generate_all_obsidian_pages() -> dict[str, str]:
    """Generate all Obsidian MOC pages and return as dict of filename to content."""
    return {
        "People.md": generate_people_page(),
        "Mental_Models.md": generate_mental_models_page(),
        "Jargon.md": generate_jargon_page(),
        "MOC.md": generate_main_moc_page()
    }
